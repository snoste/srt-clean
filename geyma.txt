const double x = pixel_dx * ((double)( px-(width/2) ));
for( int py=0; py<height; ++py )
{
  const double y = pixel_dy * ((double)( py-(height/2) ));
  Vec3 pixel_color;
  set( pixel_color, 0, 0, 0 );

  for( int xs=-halfSamples; xs<=halfSamples; ++xs )
  {
    for( int ys=-halfSamples; ys<=halfSamples; ++ys )
    {
      double subx = x + ((double)xs)*subsample_dx;
      double suby = y + ((double)ys)*subsample_dy;
      fprintf(stderr, "At width %d and height %d and subx %f and suby %d\n",px,py,subx,suby );

      /* construct the ray coming out of the camera, through
       * the screen at (subx,suby)
       */
       ray_t pixel_ray;
       copy( pixel_ray.org, camera_pos );
       Vec3 pixel_target;
       set( pixel_target, subx, suby, z );
       sub( pixel_ray.dir, pixel_target, camera_pos );
       norm( pixel_ray.dir, pixel_ray.dir );

       Vec3 sample_color;
       copy( sample_color, bg_color );
       /* trace the ray from the camera that
        * passes through this pixel */
       trace( &scene, sample_color, &pixel_ray, 0 );
       /* sum color for subpixel AA */
       add( pixel_color, pixel_color, sample_color );
    }
  }
  /* at this point, have accumulated (2*halfSamples)^2 samples,
   * so need to average out the final pixel color
   */
  if( halfSamples )
  {
    mul( pixel_color, pixel_color,
        (1.0/( 4.0 * halfSamples * halfSamples ) ) );
  }
  /* done, final floating point color values are in pixel_color */
  float scaled_color[3];
  scaled_color[0] = gamma( pixel_color[0] ) * max_color;
  scaled_color[1] = gamma( pixel_color[1] ) * max_color;
  scaled_color[2] = gamma( pixel_color[2] ) * max_color;

  /* enforce caps, replace with real gamma */
  for( int i=0; i<3; i++)
    scaled_color[i] = max( min(scaled_color[i], 255), 0);

  /* write this pixel out to disk. ppm is forgiving about whitespace,
   * but has a maximum of 70 chars/line, so use one line per pixel
   */
  res_0[px*width + py] = scaled_color[0];
  res_1[px*width + py] = scaled_color[1];
  res_2[px*width + py] = scaled_color[2];

}
